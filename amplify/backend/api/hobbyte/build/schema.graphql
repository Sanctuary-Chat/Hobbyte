schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Message {
  actionType: Int!
  from: String!
  id: ID!
  roomID: Int!
  roomName: String
  textContent: String
  to: String!
  when: String!
}

type ModelMessageConnection {
  items: [Message]
  nextToken: String
}

type Mutation {
  createMessage(condition: ModelMessageConditionInput, input: CreateMessageInput!): Message
  deleteMessage(condition: ModelMessageConditionInput, input: DeleteMessageInput!): Message
  updateMessage(condition: ModelMessageConditionInput, input: UpdateMessageInput!): Message
}

type Query {
  getMessage(id: ID!): Message
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection
}

type Subscription {
  onCreateMessage: Message @aws_subscribe(mutations : ["createMessage"])
  onCreateMessageByRecipient(to: String!): Message @aws_subscribe(mutations : ["createMessage"])
  onDeleteMessage: Message @aws_subscribe(mutations : ["deleteMessage"])
  onUpdateMessage: Message @aws_subscribe(mutations : ["updateMessage"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateMessageInput {
  actionType: Int!
  from: String!
  id: ID
  roomID: Int!
  roomName: String
  textContent: String
  to: String!
  when: String!
}

input DeleteMessageInput {
  id: ID
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelMessageConditionInput {
  actionType: ModelIntInput
  and: [ModelMessageConditionInput]
  from: ModelStringInput
  not: ModelMessageConditionInput
  or: [ModelMessageConditionInput]
  roomID: ModelIntInput
  roomName: ModelStringInput
  textContent: ModelStringInput
  to: ModelStringInput
  when: ModelStringInput
}

input ModelMessageFilterInput {
  actionType: ModelIntInput
  and: [ModelMessageFilterInput]
  from: ModelStringInput
  id: ModelIDInput
  not: ModelMessageFilterInput
  or: [ModelMessageFilterInput]
  roomID: ModelIntInput
  roomName: ModelStringInput
  textContent: ModelStringInput
  to: ModelStringInput
  when: ModelStringInput
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input UpdateMessageInput {
  actionType: Int
  from: String
  id: ID!
  roomID: Int
  roomName: String
  textContent: String
  to: String
  when: String
}